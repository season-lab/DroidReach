#!/usr/bin/env python3

import networkx as nx
import argparse
import time
import sys
import os

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), ".."))
from apk_analyzer import APKAnalyzer
from apk_analyzer.utils import md5_hash
from cex_src.cex import CEXProject

cex_project_cache = dict()

def _print_native_functions(apka, libs=None, reachable=False):
    methods = None
    if reachable:
        methods = apka.find_reachable_native_methods()
    else:
        methods = apka.find_native_methods()

    for class_name, method_name, args_str in methods:
        print(" %s %s %s" % (class_name, method_name, args_str))
        native_impls = apka.find_native_implementations(method_name, class_name, args_str, libs)
        if len(native_impls) == 0:
            print("   * no implementation found")
            continue

        for native_impl in native_impls:
            print("   * %s\t%#x" % (native_impl.analyzer.libpath, native_impl.offset))

def _find_producer(apka, consumer, libs=None, reachable=False):
    class_name  = "L" + "/".join(consumer.split(".")[:-1]) + ";"
    method_name = consumer.split(".")[-1]

    consumer_impl = None
    for method in apka.find_native_methods_implementations(libs, reachable):
        if method.class_name == class_name and method.method_name == method_name:
            consumer_impl = method
            break

    if consumer_impl is None:
        print("[+] Unable to find method", consumer)
        return

    print("[+] Finding producer for method", consumer)
    maybe_producers = apka.find_potential_producers(consumer_impl, lib_whitelist=libs, reachable=False)
    print("[+] Found %d possible producers" % len(maybe_producers))
    for maybe_producer in maybe_producers:
        print(maybe_producer)
        vtable = apka.vtable_from_jlong_ret(maybe_producer, use_angr=False)
        if vtable is not None:
            print("[!] Producer: %s %s %s @ %s %#x - vtable %#x" % \
                (maybe_producer.class_name, maybe_producer.method_name, maybe_producer.args_str, maybe_producer.libpath, maybe_producer.offset, vtable))
            break

def _check_consumer(apka, consumer, libs=None):
    class_name  = "L" + "/".join(consumer.split(".")[:-1]) + ";"
    method_name = consumer.split(".")[-1]

    consumer_impl = None
    for method in apka.find_native_methods_implementations(libs):
        if method.class_name == class_name and method.method_name == method_name:
            consumer_impl = method
            break

    if consumer_impl is None:
        print("[+] Unable to find method", consumer)
        return

    print("[+] Checking if", consumer, "is a consumer")
    args = apka.jlong_as_cpp_obj(consumer_impl, use_angr=False)
    print("[!] The consumer uses the args %s as jlong pointers" % str(args))

def _find_vtable(apka, producer, libs=None, reachable=False):
    class_name  = "L" + "/".join(producer.split(".")[:-1]) + ";"
    method_name = producer.split(".")[-1]

    angr_emu = CEXProject.pm.get_plugin_by_name("AngrEmulated")

    producer_impl = None
    for method in apka.find_native_methods_implementations(libs, reachable):
        if method.class_name == class_name and method.method_name == method_name:
            producer_impl = method
            break

    if producer_impl is None:
        print("[+] Unable to find method", producer)
        return

    print(producer_impl)
    print("[+] Finding vtable for producer", producer, "@", hex(producer_impl.offset))
    angr_emu.use_timeout_for_cfg = True
    vtable = apka.vtable_from_jlong_ret(producer_impl, use_angr=False)
    if vtable is not None:
        print("[!] vtable:", hex(vtable))
    else:
        print("[!] vtable not found")

def _find_path_to(apka, what, libs=None, reachable=False, disable_multilib=False, disable_angr=False, disable_ghidra=False):
    lib, offset = what.split("@")

    try:
        offset = int(offset, 16)
    except:
        name = offset
        offset = None

    if libs is None:
        libs = apka.get_analyzed_libs()
    else:
        libs = apka.get_armv7_libs()
    lib_hashes = list(map(lambda l: l.libhash, libs))

    libhash = None
    analyzed_lib = None
    for l in libs:
        if l.libname == lib:
            libhash = l.libhash
            analyzed_lib = l
    if libhash is None:
        print("[!] Unable to find lib %s" % lib)
        return

    if offset is None:
        rz = analyzed_lib._open_rz()
        rz.cmd("aa")
        addr = rz.cmd("afl~%s[0]" % name).strip()

        rz.quit()
        if addr == "":
            print("[!] Unable to find function %s" % name)
            return
        offset = int(addr, 16)

    print("[+] Looking for path to %s @ %#x" % (lib, offset))

    print("[+] Building library dependency graph... ", end="")
    start = time.time()
    ldg = apka.build_lib_dependency_graph()
    elapsed = time.time() - start
    print("OK (%.03f s)" % elapsed)

    ghidra = CEXProject.pm.get_plugin_by_name("Ghidra")

    jni_methods = dict()
    for method in apka.find_native_methods_implementations(lib_hashes, reachable):
        if method.libpath not in jni_methods:
            jni_methods[method.libpath] = list()
        jni_methods[method.libpath].append(method.offset)

    if not disable_ghidra:
        print("[+] Defining JNI functions in Ghidra... ", end="")
        start = time.time()
        for jni_lib in jni_methods:
            ghidra.define_functions(jni_lib, jni_methods[jni_lib])
        elapsed = time.time() - start
        print("OK (%.03f s)" % elapsed)

    for method in apka.find_native_methods_implementations(lib_hashes, reachable):
        print("[+] Checking path from native method %s %s @ %s %#x" % \
            (method.class_name, method.method_name, method.libpath, method.offset))
        if not (method.libhash == libhash or nx.has_path(ldg, method.libhash, libhash)):
            print("[!] No path (lib dep graph)")
            continue

        main_lib = method.libpath
        if not disable_multilib:
            other_libs = list(map(lambda l: l.libpath, filter(lambda l: l.libpath != method.libpath, libs)))
        else:
            other_libs = list()

        src_addr = method.offset & 0xfffffffe

        print("[+] Building the callgraph... ", end="")
        plugins = []
        if not disable_ghidra:
            plugins.append("Ghidra")
        if not disable_angr:
            plugins.append("AngrEmulated")

        if method.libhash in cex_project_cache:
            proj = cex_project_cache[method.libhash]
        else:
            proj = CEXProject(main_lib, other_libs, plugins=plugins)
            cex_project_cache[method.libhash] = proj
        start = time.time()
        cg = proj.get_callgraph(src_addr)
        elapsed = time.time() - start
        print(" OK (n_nodes: %d, n_edges: %d, elapsed: %.03f s)" % (len(cg.nodes), len(cg.edges), elapsed))

        binfo = proj.get_bininfo(lib)
        if binfo is None:
            print("[!] No path (lib not in callgraph)")
            continue
        rebased_off = offset + binfo.min_addr
        rebased_off = rebased_off & 0xfffffffffffffffe

        if rebased_off not in cg.nodes:
            print("[!] No path (addr not in callgraph)")
        elif nx.has_path(cg, src_addr, rebased_off):
            path_to_java = apka.get_path_to_native_method(method)
            print("[+] Path found:")
            if path_to_java is not None:
                for j in path_to_java:
                    print(" -> %s" % j)
            else:
                print(" -> %s %s" % (method.class_name, method.method_name))
            p = nx.shortest_path(cg, src_addr, rebased_off)
            for v in p:
                data  = cg.nodes[v]["data"]
                binfo = proj.get_bin_containing(v)
                assert binfo is not None
                print(" -> %s @ %s+%#x" % (data.name, binfo.name, v - binfo.min_addr))
            break
        else:
            print("[!] No path (callgraph)")

def _find_path_to_csv(apka, file, libs=None, reachable=False, disable_multilib=False, disable_angr=False, disable_ghidra=False):
    fin = open(file, "r")
    for line in fin:
        line = line.strip()
        if line == "":
            continue

        lib, offset = line.split(",")
        lib = os.path.basename(lib)
        _find_path_to(apka, "%s@%s" % (lib, offset), libs, reachable, disable_multilib, disable_angr, disable_ghidra)

    fin.close()

def _show_lib_dep_graph(apka):
    ldg = apka.build_lib_dependency_graph()

    print("digraph {\n\tnode [shape=box];")
    print("\tgraph [fontname = \"monospace\"];")
    print("\tnode  [fontname = \"monospace\"];")
    print("\tedge  [fontname = \"monospace\"];")

    for n in ldg.nodes:
        print("\t\"%s\" [label=\"%s\"];" % (n, ldg.nodes[n]["path"]))
    print()

    for src, dst, i in ldg.edges:
        if i != 0:
            continue
        print("\t\"%s\" -> \"%s\";" % (src, dst))
    print("}")

def _configure_angr_ghidra(args):
    angr_emu = CEXProject.pm.get_plugin_by_name("AngrEmulated")
    angr_emu.use_timeout_for_cfg = True

    ghidra = CEXProject.pm.get_plugin_by_name("Ghidra")

    if args.ghidra_timeout:
        ghidra.timeout = int(args.ghidra_timeout)

    if args.angr_timeout:
        angr_emu.timeout = int(args.angr_timeout)

    if args.angr_max_calldepth:
        angr_emu.calldepth = int(args.angr_max_calldepth)

    if args.angr_ctx_sensitivity:
        angr_emu.ctx_sensitivity = int(args.angr_ctx_sensitivity)

def main(args):
    apk_path = args.apk

    apka = APKAnalyzer(apk_path)
    reachable_analysis = False
    libs               = None
    disable_angr       = False
    disable_ghidra     = False
    disable_multilib   = False

    if args.reachable:
        reachable_analysis = True
    if not args.all_archs:
        libs = apka.get_armv7_libs()
        libs = list(map(lambda l: l.libhash, libs))
    if args.disable_angr:
        disable_angr = True
    if args.disable_ghidra:
        disable_ghidra = True
    if args.disable_multilib:
        disable_multilib = True

    if disable_ghidra and disable_angr:
        sys.stderr.write("!Err: you cannot disable both Angr and Ghidra")
        return 1

    _configure_angr_ghidra(args)

    if args.print_native_functions:
        _print_native_functions(apka, libs, reachable_analysis)

    if args.find_producer is not None:
        _find_producer(apka, args.find_producer, libs, reachable_analysis)

    if args.check_consumer is not None:
        _check_consumer(apka, args.check_consumer, libs)

    if args.find_vtable is not None:
        _find_vtable(apka, args.find_vtable, libs, reachable_analysis)

    if args.find_path_to is not None:
        _find_path_to(apka, args.find_path_to, libs, reachable_analysis, disable_multilib, disable_angr, disable_ghidra)

    if args.find_path_to_csv is not None:
        _find_path_to_csv(apka, args.find_path_to_csv, libs, reachable_analysis, disable_multilib, disable_angr, disable_ghidra)

    if args.show_lib_dep_graph:
        _show_lib_dep_graph(apka)

    return 0

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='Liana APK analyzer')
    parser.add_argument("--print-native-functions", help="Print native functions", action="store_true")
    parser.add_argument("--check-consumer", help="Check if the method is a consumer", nargs="?")
    parser.add_argument("--find-producer", help="Look for a producer given a consumer", nargs="?")
    parser.add_argument("--find-vtable", help="Find the returned vtable of a producer", nargs="?")
    parser.add_argument("--reachable", help="Analyze only reachable functions", action="store_true")
    parser.add_argument("--disable-multilib", help="Disable the reasoning on multiple libraries", action="store_true")
    parser.add_argument("--disable-angr", help="Disable Angr plugin", action="store_true")
    parser.add_argument("--disable-ghidra", help="Disable Ghidra plugin", action="store_true")
    parser.add_argument("--ghidra-timeout", help="Set timeout for Ghidra on a single binary (default 20 min)", metavar="nsec", nargs="?")
    parser.add_argument("--angr-timeout", help="Set timeout for Angr on a iCFG (default 30 min)", metavar="nsec", nargs="?")
    parser.add_argument("--angr-max-calldepth", help="Set maximum calldepth for Angr (default 5)", metavar="val", nargs="?")
    parser.add_argument("--angr-ctx-sensitivity", help="Set context sensitivity for Angr (default 1)", metavar="val", nargs="?")
    parser.add_argument("--all-archs", help="Analyze all archs (not only armv7) [Experimental]", action="store_true")
    parser.add_argument("--find-path-to", metavar="libpath.so@offset/name", help="Find path to native function", nargs="?")
    parser.add_argument("--find-path-to-csv", metavar="file.csv", help="Find path to the native functions specified in the CSV (lib.so,offset)", nargs="?")
    parser.add_argument("--show-lib-dep-graph", help="Print the library dependency graph in dot to stdout", action="store_true")

    parser.add_argument("apk", help="The binary to analyze")

    args = parser.parse_args()
    exit(main(args))
