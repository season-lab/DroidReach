Package,Hash,Validation mode,Confidence,# Code Points (CP) ,# Validated CPs,Tested Libraries,Notes
com.king.candycrushjellysaga,D6DE1A5F16470F56A2AF97008A99CE04D28126373F12AC7CE183252F51C52ED2,Dynamic,High,168,63,librakdos.so,"This is an interesting case that employs a very large library (22 MB) with a relatively low number of code points. In this case, most of code points are detected while loading the game. The code points that we could not validate may require to pass various levels of the game, as well as (possibly) completing it. "
com.picsart.studio,5D7B7E84C6BCCE6F9796F27D1FEDCF51CEE629F542A41972D9F59D782D059704,Dynamic,High,1307,748,"libpicore.so, libpitools.so","Our study focused on the libraries containing most code points, i.e., libpicore.so and libpitools.so. In particular, each library is related to a specific image transformation tool (e.g., resize, crop, filters, etc). A lot of manual work was required to test each filter. The application is also prone to crash multiple times during  debugging, which is incidentally extremely slow in this case."
com.cam001.selfie,D9CA842E8F60916D30D256721C010DAB5E910E9B83A44F6E18AE500A97592C76,Dynamic,High,974,326,"libFacialOutline.so, libbzparticle.so","We focused on the two libraries with the highest number of code points, namely libFacialOutline.so and libbzparticle.so. The various code points are triggered by applying particle filters to the images and drawing directly on the taken image. Important note: an SD card is required to make the application work properly."
com.imangi.templerun,99BDEC46F5D941BAD74C2BA9993A1D0080C0BF132D25D375EF39712752CFD04E,Dynamic,High,2357,1565,libmono.so,"Most of code points are inside the libmono.so library, which is a nested library. This is a very interesting case where most of the points are triggered while the game starts and the character moves."
com.amazon.mp3,D39599A3E26402E352D5B29B69A20170232BAC88289AD13874EA8432A861ABAF,Mixed,Medium,625,441,"libdmengine.so,  libpryon_lite.so, libsyendk.so, libAIVSecureRenderer.so, libc++_shared.so, libvompEngn_OSMP.so","We were able to dynamically validate only a small number of code points because the application kept crashing when inserting the breakpoints in some libraries. Overall, several code points are correct as they happen after indirect jumps that are not resolved by Ghidra (0x5e9718 in ibdmengine.so) but can be recovered by angr, however, the code points are at a high call depth (>5), thus are missed by angr. Additionally, several of these libraries are nested. We are not 100% sure on the reachability of 3 code points from libvompEngn_OSMP.so: only with a dynamic validation we may understand if they are valid."
shareit.lite,7BDFD305F55791031BBC1D5B6D1520A34FDD28E5459AF34742EF55ED328297B2,Static,Medium,12,12,libstp.so,"Static analysis here is required as the application exhibits several crashes when performing dynamic analysis. Ghidra for some unknown reasons (maybe a bug) is marking a few jumps as non returning,  thus ignoring several code blocks. angr instead is considering these code blocks but then it is missing several code points that at are executed at a high call depth. IDA Pro seems to agree with angr on the reachability of the code blocks ignored by Ghidra (see, e.g., 0x31404, 0x109E0, 0x301D8)."
com.sec.android.easyMover,030ACAAD1A0A91FB2F86974B86F3DD795D4DD68F74F7E9204FD8587B1531E26D,Static,Medium,107,60,libiosotgcommon.so,"This is an app designed to help the user move data from an old device to a Galaxy device. In particular, the code points are within a library that is executed when transferring data via USB OTG across two devices. It is hard to reproduce such a usage scenario in our setup. When statically analyzing the code points, we can see that they are part of a nested library. Moreover, some of them are within exception handlers."